{"version":3,"sources":["assets/logo.png","utils/history.js","utils/handle-response.js","services/authenticationService.js","guards/private-route.js","components/auth/Login.jsx","components/auth/Register.jsx","screens/Home.jsx","components/core/Header.jsx","utils/common.js","utils/auth-header.js","components/chat/ChatBox.jsx","services/chatService.js","components/chat/Conversations.jsx","components/chat/Users.jsx","services/userService.js","screens/Chat.jsx","App.js","serviceWorker.js","index.js","assets/background.jpg"],"names":["module","exports","history","createBrowserHistory","useHandleResponse","enqueueSnackbar","useSnackbar","response","text","then","data","JSON","parse","ok","indexOf","status","authenticationService","logout","variant","error","message","statusText","Promise","reject","currentUserSubject","BehaviorSubject","localStorage","getItem","removeItem","next","currentUser","asObservable","value","PrivateRoute","Component","component","rest","render","props","currentUserValue","to","pathname","state","from","location","useStyles","makeStyles","theme","root","height","image","backgroundImage","background","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","secondary","main","form","width","marginTop","submit","Login","login","handleResponse","email","password","requestOptions","method","headers","body","stringify","fetch","process","user","setItem","catch","useLogin","classes","className","Avatar","Typography","align","initialValues","validationSchema","Yup","shape","required","max","min","onSubmit","setStatus","setSubmitting","push","handleSubmit","handleChange","values","touched","errors","TextField","id","textField","name","label","fullWidth","helperText","Boolean","onChange","Button","color","Link","onClick","handleClick","href","Register","register","username","confirmPassword","useRegister","oneOf","validateOnChange","validateOnBlur","isValid","Home","useState","page","setPage","useEffect","Content","Grid","container","item","xs","sm","md","Paper","elevation","square","flexGrow","title","userDropdown","marginLeft","padding","breakpoints","down","Header","anchorEl","setAnchorEl","dropdownOpen","setDropdownOpen","AppBar","position","Toolbar","src","logo","alt","aria-owns","undefined","aria-haspopup","event","currentTarget","Menu","open","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","String","split","map","i","charAt","join","authHeader","token","Authorization","headerRow","maxHeight","zIndex","justifyContent","primary","dark","messageContainer","alignContent","messagesRow","overflowY","newMessageRow","messageBubble","border","borderRadius","boxShadow","maxWidth","messageBubbleRight","inputRow","listItem","listItemRight","ChatBox","userId","currentUserId","newMessage","setNewMessage","messages","setMessages","lastMessage","setLastMessage","getGlobalMessages","useGetGlobalMessages","sendGlobalMessage","global","err","console","log","useSendGlobalMessage","getConversationMessages","useGetConversationMessages","sendConversationMessage","useSendConversationMessage","chatBottom","useRef","reloadMessages","scrollToBottom","scope","conversationId","socketIOClient","on","res","_id","current","scrollIntoView","behavior","List","m","ListItem","key","classnames","fromObj","ListItemAvatar","commonUtils","ListItemText","Fragment","ref","e","preventDefault","target","IconButton","subheader","cursor","globe","subheaderText","list","Conversations","conversations","setConversations","newConversation","setNewConversation","getConversations","useGetConversations","handleRecipient","recipients","length","socket","removeListener","setScope","Divider","c","button","setUser","recipientObj","Users","users","setUsers","newUser","setNewUser","getUsers","useGetUsers","u","minHeight","sidebar","Chat","tab","setTab","Tabs","newVal","indicatorColor","textColor","Tab","createMuiTheme","light","contrastText","default","typography","useNextVariants","fontFamily","App","ThemeProvider","CssBaseline","maxSnack","autoHideDuration","path","exact","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,yNCI5BC,EAFCC,c,kBC0BDC,EAzBW,WAAO,IACrBC,EAAoBC,wBAApBD,gBAqBR,OAnBuB,SAAAE,GACnB,OAAOA,EAASC,OAAOC,MAAK,SAAAD,GACxB,IAAME,EAAOF,GAAQG,KAAKC,MAAMJ,GAChC,IAAKD,EAASM,GAAI,EAC+B,IAAzC,CAAC,IAAK,KAAKC,QAAQP,EAASQ,UAC5BC,EAAsBC,SACtBZ,EAAgB,oBAAqB,CACjCa,QAAS,WAIjB,IAAMC,EAAST,GAAQA,EAAKU,SAAYb,EAASc,WACjD,OAAOC,QAAQC,OAAOJ,GAG1B,OAAOT,OChBbc,EAAqB,IAAIC,IAC3Bd,KAAKC,MAAMc,aAAaC,QAAQ,iBAGvBX,EAAwB,CACjCC,OA4EJ,WACIS,aAAaE,WAAW,eACxBJ,EAAmBK,KAAK,OA7ExBC,YAAaN,EAAmBO,eAChC,uBACI,OAAOP,EAAmBQ,QCRlC,IAoBeC,EApBM,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAAyBC,EAA5B,oCACjB,kBAAC,IAAD,iBACQA,EADR,CAEIC,OAAQ,SAAAC,GAEJ,OADoBtB,EAAsBuB,iBAWnC,kBAACL,EAAcI,GAPd,kBAAC,IAAD,CACIE,GAAI,CAAEC,SAAU,IAAKC,MAAO,CAAEC,KAAML,EAAMM,kB,mICQ5DC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQ,SAEZC,MAAO,CACHC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,gBACyB,UAAvBP,EAAMQ,QAAQC,KAAmBT,EAAMQ,QAAQE,KAAK,IAAMV,EAAMQ,QAAQE,KAAK,KAC/EC,eAAgB,QAChBC,mBAAoB,UAExBC,MAAO,CACHC,OAAQd,EAAMe,QAAQ,GACtBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJL,OAAQd,EAAMe,QAAQ,GACtBR,gBAAiBP,EAAMQ,QAAQY,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPC,UAAWxB,EAAMe,QAAQ,IAE7BU,OAAQ,CACJX,OAAQd,EAAMe,QAAQ,EAAG,EAAG,QA4HrBW,EAxHD,SAAAnC,GACV,IAAMoC,EFrCH,WAAqB,IAChBrE,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IA0BvB,OAxBc,SAACwE,EAAOC,GAClB,IAAMC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMtE,KAAKuE,UAAU,CAAEN,QAAOC,cAGlC,OAAOM,MAAM,GAAD,OACLC,wBADK,oBAERN,GAECrE,KAAKkE,GACLlE,MAAK,SAAA4E,GAGF,OAFA3D,aAAa4D,QAAQ,cAAe3E,KAAKuE,UAAUG,IACnD7D,EAAmBK,KAAKwD,GACjBA,KAEVE,OAAM,WACHlF,EAAgB,kBAAmB,CAC/Ba,QAAS,cEcXsE,GACRC,EAAU5C,IAEhB,OACI,yBAAK6C,UAAWD,EAAQ7B,OACpB,kBAAC+B,EAAA,EAAD,CAAQD,UAAWD,EAAQvB,QACvB,kBAAC,IAAD,OAEJ,kBAAC0B,EAAA,EAAD,CAAYzD,UAAU,KAAKjB,QAAQ,KAAK2E,MAAM,UAA9C,WAGA,kBAAC,IAAD,CACIC,cAAe,CACXlB,MAAO,GACPC,SAAU,IAEdkB,iBAAkBC,WAAaC,MAAM,CACjCrB,MAAOoB,WACFE,SAAS,qBACTtB,MAAM,iBACXC,SAAUmB,WACLE,SAAS,wBACTC,IAAI,IAAK,wBACTC,IAAI,EAAG,wBAEhBC,SAAU,cAGJ,IAFAzB,EAED,EAFCA,MAAOC,EAER,EAFQA,SACPyB,EACD,EADCA,UAAWC,EACZ,EADYA,cAEbD,IACA5B,EAAME,EAAOC,GAAUpE,MACnB,WAAO,IACKkC,GAASzC,EAAQ0C,SAASF,OAAS,CACvCC,KAAM,CAAEF,SAAU,WADdE,KAGRzC,EAAQsG,KAAK7D,MAEjB,SAAAxB,GACIoF,GAAc,GACdD,EAAUnF,SAKrB,gBACGsF,EADH,EACGA,aACAC,EAFH,EAEGA,aACAC,EAHH,EAGGA,OACAC,EAJH,EAIGA,QACAC,EALH,EAKGA,OALH,OAOG,0BACIR,SAAUI,EACVf,UAAWD,EAAQpB,MAEnB,kBAACyC,EAAA,EAAD,CACIC,GAAG,QACHrB,UAAWD,EAAQuB,UACnBC,KAAK,QACLC,MAAM,QACNC,WAAW,EACXjG,QAAQ,WACR2C,OAAO,SACPqC,UAAU,EACVkB,WACIR,EAAQhC,MAAQiC,EAAOjC,MAAQ,GAEnCzD,MACIyF,EAAQhC,OACRyC,QAAQR,EAAOjC,OAEnB5C,MAAO2E,EAAO/B,MACd0C,SAAUZ,EACVlD,KAAK,UAET,kBAACsD,EAAA,EAAD,CACIC,GAAG,WACHrB,UAAWD,EAAQuB,UACnBC,KAAK,WACLC,MAAM,WACNC,WAAW,EACXjG,QAAQ,WACR2C,OAAO,SACPqC,UAAU,EACVkB,WACIR,EAAQ/B,SAAWgC,EAAOhC,SAAW,GAEzC1D,MACIyF,EAAQ/B,UACRwC,QAAQR,EAAOhC,UAEnB7C,MAAO2E,EAAO9B,SACdyC,SAAUZ,EACVlD,KAAK,aAET,kBAAC+D,EAAA,EAAD,CACI/D,KAAK,SACL2D,WAAW,EACXjG,QAAQ,YACRsG,MAAM,UACN9B,UAAWD,EAAQjB,QALvB,aAYZ,kBAACoB,EAAA,EAAD,KACI,kBAAC6B,EAAA,EAAD,CACIC,QAAS,kBAAMpF,EAAMqF,YAAY,aACjCC,KAAK,KAFT,6B,SCjJV/E,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQ,SAEZC,MAAO,CACHC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,gBACyB,UAAvBP,EAAMQ,QAAQC,KAAmBT,EAAMQ,QAAQE,KAAK,IAAMV,EAAMQ,QAAQE,KAAK,KAC/EC,eAAgB,QAChBC,mBAAoB,UAExBC,MAAO,CACHC,OAAQd,EAAMe,QAAQ,GACtBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJL,OAAQd,EAAMe,QAAQ,GACtBR,gBAAiBP,EAAMQ,QAAQY,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPC,UAAWxB,EAAMe,QAAQ,IAE7BU,OAAQ,CACJX,OAAQd,EAAMe,QAAQ,EAAG,EAAG,QAyLrB+D,EArLE,SAAAvF,GACb,IAAMwF,EHDH,WAAwB,IACnBzH,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IAiCvB,OA/BiB,SAACwE,EAAOmD,EAAUlD,EAAUmD,GACzC,IAAMlD,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMtE,KAAKuE,UAAU,CAAEN,QAAOmD,WAAUlD,WAAUmD,qBAGtD,OAAO7C,MAAM,GAAD,OACLC,wBADK,uBAERN,GAECrE,KAAKkE,GACLlE,MAAK,SAAA4E,GAIF,OAHA3D,aAAa4D,QAAQ,cAAe3E,KAAKuE,UAAUG,IACnD7D,EAAmBK,KAAKwD,GAEjBA,KAEVE,OAAM,SAAShF,GAERF,EADAE,GAKgB,qBAJU,CACtBW,QAAS,cGxBZ+G,GAEXxC,EAAU5C,IAEhB,OACI,yBAAK6C,UAAWD,EAAQ7B,OACpB,kBAAC+B,EAAA,EAAD,CAAQD,UAAWD,EAAQvB,QACvB,kBAAC,IAAD,OAEJ,kBAAC0B,EAAA,EAAD,CAAYzD,UAAU,KAAKjB,QAAQ,KAAK2E,MAAM,UAA9C,YAGA,kBAAC,IAAD,CACIC,cAAe,CACXmB,KAAM,GACNc,SAAU,GACVlD,SAAU,GACVmD,gBAAiB,IAErBjC,iBAAkBC,WAAaC,MAAM,CACjCrB,MAAOoB,WACFE,SAAS,qBACTtB,MAAM,iBACXmD,SAAU/B,WACLE,SAAS,wBACTC,IAAI,GAAI,6BACbtB,SAAUmB,WACLE,SAAS,wBACTC,IAAI,IAAK,qBACTC,IACG,EACA,iDAER4B,gBAAiBhC,WAAakC,MAC1B,CAAClC,MAAQ,YAAa,MACtB,4BAGRK,SAAU,cAGJ,IAFAzB,EAED,EAFCA,MAAOmD,EAER,EAFQA,SAAUlD,EAElB,EAFkBA,SAAUmD,EAE5B,EAF4BA,gBAC3B1B,EACD,EADCA,UAAWC,EACZ,EADYA,cAEbD,IACAwB,EAASlD,EAAOmD,EAAUlD,EAAUmD,GAAiBvH,MACjD,SAAA4E,GAAS,IACG1C,GAASzC,EAAQ0C,SAASF,OAAS,CACvCC,KAAM,CAAEF,SAAU,WADdE,KAGRzC,EAAQsG,KAAK7D,MAEjB,SAAAxB,GACIoF,GAAc,GACdD,EAAUnF,OAItBgH,kBAAkB,EAClBC,gBAAgB,IAEf,gBACG3B,EADH,EACGA,aACAC,EAFH,EAEGA,aACAC,EAHH,EAGGA,OACAC,EAJH,EAIGA,QAEAC,GANH,EAKGwB,QALH,EAMGxB,QANH,OAQG,0BACIR,SAAUI,EACVf,UAAWD,EAAQpB,MAEnB,kBAACyC,EAAA,EAAD,CACIC,GAAG,QACHrB,UAAWD,EAAQuB,UACnBC,KAAK,QACLC,MAAM,QACNC,WAAW,EACXjG,QAAQ,WACR2C,OAAO,SACPqC,UAAU,EACVkB,WACIR,EAAQhC,MAAQiC,EAAOjC,MAAQ,GAEnCzD,MACIyF,EAAQhC,OACRyC,QAAQR,EAAOjC,OAEnB5C,MAAO2E,EAAO/B,MACd0C,SAAUZ,EACVlD,KAAK,UAGT,kBAACsD,EAAA,EAAD,CACIC,GAAG,WACHrB,UAAWD,EAAQuB,UACnBC,KAAK,WACLC,MAAM,WACNC,WAAW,EACXjG,QAAQ,WACR2C,OAAO,SACPqC,UAAU,EACVkB,WACIR,EAAQmB,SAAWlB,EAAOkB,SAAW,GAEzC5G,MACIyF,EAAQmB,UACRV,QAAQR,EAAOkB,UAEnB/F,MAAO2E,EAAOoB,SACdT,SAAUZ,IAGd,kBAACI,EAAA,EAAD,CACIC,GAAG,WACHrB,UAAWD,EAAQuB,UACnBC,KAAK,WACLC,MAAM,WACNC,WAAW,EACXjG,QAAQ,WACR2C,OAAO,SACPqC,UAAU,EACVkB,WACIR,EAAQ/B,SAAWgC,EAAOhC,SAAW,GAEzC1D,MACIyF,EAAQ/B,UACRwC,QAAQR,EAAOhC,UAEnB7C,MAAO2E,EAAO9B,SACdyC,SAAUZ,EACVlD,KAAK,aAGT,kBAACsD,EAAA,EAAD,CACIC,GAAG,kBACHrB,UAAWD,EAAQuB,UACnBC,KAAK,kBACLC,MAAM,mBACNC,WAAW,EACXjG,QAAQ,WACR2C,OAAO,SACPqC,UAAU,EACVkB,WACIR,EAAQoB,gBACFnB,EAAOmB,gBACP,GAEV7G,MACIyF,EAAQoB,iBACRX,QAAQR,EAAOmB,iBAEnBhG,MAAO2E,EAAOqB,gBACdV,SAAUZ,EACVlD,KAAK,aAGT,kBAAC+D,EAAA,EAAD,CACI/D,KAAK,SACL2D,WAAW,EACXjG,QAAQ,YACRsG,MAAM,UACN9B,UAAWD,EAAQjB,QALvB,gBAYZ,kBAACoB,EAAA,EAAD,KACI,kBAAC6B,EAAA,EAAD,CACIC,QAAS,kBAAMpF,EAAMqF,YAAY,UACjCC,KAAK,KAFT,+BChNV/E,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQ,SAEZC,MAAO,CACHC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,gBACyB,UAAvBP,EAAMQ,QAAQC,KAAmBT,EAAMQ,QAAQE,KAAK,IAAMV,EAAMQ,QAAQE,KAAK,KAC/EC,eAAgB,QAChBC,mBAAoB,cAoCb2E,EAhCF,WACT,IAAM7C,EAAU5C,IADD,EAES0F,mBAAS,SAFlB,mBAERC,EAFQ,KAEFC,EAFE,KAIfC,qBAAU,WACF1H,EAAsBuB,kBACtBrC,EAAQsG,KAAK,WAElB,IAEH,IAIImC,EAJEhB,EAAc,SAAA/E,GAChB6F,EAAQ7F,IAWZ,OALI+F,EADS,UAATH,EACU,kBAAC,EAAD,CAAOb,YAAaA,IAEpB,kBAAC,EAAD,CAAUA,YAAaA,IAIjC,kBAACiB,EAAA,EAAD,CAAMC,WAAS,EAAC1G,UAAU,OAAOuD,UAAWD,EAAQzC,MAChD,kBAAC4F,EAAA,EAAD,CAAME,MAAI,EAACC,IAAI,EAAOC,GAAI,EAAGC,GAAI,EAAGvD,UAAWD,EAAQvC,QACvD,kBAAC0F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAG9G,UAAW+G,IAAOC,UAAW,EAAGC,QAAM,GAClET,K,qHCnCX9F,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFqG,SAAU,GAEdC,MAAO,CACHD,SAAU,EACVtF,QAAS,QAEbwF,aAAa,aACTC,WAAYzG,EAAMe,QAAQ,GAC1B2F,QAAS1G,EAAMe,QAAQ,IACtBf,EAAM2G,YAAYC,KAAK,MAAQ,CAC5BH,WAAY,aA0ETI,GArEA,WAAO,IAAD,EACKrB,mBAASvH,EAAsBuB,kBAA9CT,EADU,sBAEeyG,mBAAS,MAFxB,mBAEVsB,EAFU,KAEAC,EAFA,OAGuBvB,oBAAS,GAHhC,mBAGVwB,EAHU,KAGIC,EAHJ,KA2BXvE,EAAU5C,KAEhB,OACI,yBAAK6C,UAAWD,EAAQzC,MACpB,kBAACiH,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAC1C,EAAA,EAAD,CAAMG,KAAK,IAAIlC,UAAWD,EAAQ6D,OAC9B,yBAAKc,IAAKC,KAAMC,IAAI,OAAOrH,OAAO,QAEtC,kBAACsE,EAAA,EAAD,CACIgD,YAAWV,EAAW,mBAAgBW,EACtCC,gBAAc,OACd/C,QA7BG,SAAAgD,GACnBV,GAAgB,GAChBF,EAAYY,EAAMC,gBA4BFjF,UAAWD,EAAQ8D,aACnB/B,MAAM,WAEL1F,EAAYiG,SAtBzBgC,EACO,kBAAC,IAAD,MAEJ,kBAAC,IAAD,OAsBK,kBAACa,EAAA,EAAD,CACI7D,GAAG,cACH8C,SAAUA,EACVgB,KAAMxD,QAAQwC,GACdiB,QA7CI,WACpBd,GAAgB,GAChBF,EAAY,OA4CIiB,mBAAoB,KACpBC,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,UAGhB,kBAACE,EAAA,EAAD,CAAU1D,QA9CT,WACjB1G,EAAsBC,SACtBf,EAAQsG,KAAK,OA4CG,e,gHC7FT,GACQ,SAACuB,GAIpB,OAHgBsD,OAAOtD,GACpBuD,MAAM,KACNC,KAAI,SAACC,GAAD,OAAOA,EAAEC,OAAO,MACRC,KAAK,KCSTC,OAZf,WACI,IAAM7J,EAAcd,EAAsBuB,iBAC1C,OAAIT,GAAeA,EAAY8J,MACpB,CACHC,cAAc,GAAD,OAAK/J,EAAY8J,OAC9B,eAAgB,oBAGb,ICcf,IAAM/I,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,OAAQ,QAEV6I,UAAW,CACTC,UAAW,GACXC,OAAQ,GAEVpI,MAAO,CACLG,QAAS,OACTE,WAAY,SACZgI,eAAgB,SAChBhJ,OAAQ,OACRuE,MAAOzE,EAAMQ,QAAQ2I,QAAQC,MAE/BC,iBAAkB,CAChBnJ,OAAQ,OACRc,QAAS,OACTsI,aAAc,YAEhBC,YAAa,CACXP,UAAW,sBACXQ,UAAW,QAEbC,cAAe,CACblI,MAAO,OACPmF,QAAS1G,EAAMe,QAAQ,EAAG,EAAG,IAE/B2I,cAAe,CACbhD,QAAS,GACTiD,OAAQ,kBACRpJ,gBAAiB,QACjBqJ,aAAc,mBACdC,UAAW,oCACXrI,UAAW,EACXsI,SAAU,QAEZC,mBAAoB,CAClBH,aAAc,oBAEhBI,SAAU,CACRhJ,QAAS,OACTE,WAAY,YAEdI,KAAM,CACJC,MAAO,QAETJ,OAAQ,CACNL,OAAQd,EAAMe,QAAQ,EAAG,MAE3BkJ,SAAU,CACRjJ,QAAS,OACTO,MAAO,QAET2I,cAAe,CACbjJ,cAAe,mBAyIJkJ,GArIC,SAAC5K,GAAW,IAAD,EACDiG,mBACtBvH,EAAsBuB,iBAAiB4K,QADlCC,EADkB,sBAIW7E,mBAAS,IAJpB,mBAIlB8E,EAJkB,KAINC,EAJM,OAKO/E,mBAAS,IALhB,mBAKlBgF,EALkB,KAKRC,EALQ,OAMajF,mBAAS,MANtB,mBAMlBkF,EANkB,KAMLC,EANK,KAQnBC,ECtFD,WAAiC,IAC5BtN,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IACjB0E,EAAiB,CACnBC,OAAQ,MACRC,QAAS2G,MAgBb,OAb0B,WACtB,OAAOxG,MAAM,GAAD,OACLC,wBADK,wBAERN,GAECrE,KAAKkE,GACLY,OAAM,kBACHlF,EAAgB,6BAA8B,CAC1Ca,QAAS,cDsED0M,GACpBC,EC9DD,WAAiC,IAC5BxN,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IAsBvB,OApB0B,SAAA6E,GACtB,IAAMH,EAAiB,CACnBC,OAAQ,OACRC,QAAS2G,KACT1G,KAAMtE,KAAKuE,UAAU,CAAED,KAAMA,EAAM6I,QAAQ,KAG/C,OAAO3I,MAAM,GAAD,OACLC,wBADK,wBAERN,GAECrE,KAAKkE,GACLY,OAAM,SAAAwI,GACHC,QAAQC,IAAIF,GACZ1N,EAAgB,qBAAsB,CAClCa,QAAS,cD2CDgN,GACpBC,ECTD,WAAuC,IAClC9N,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IACjB0E,EAAiB,CACnBC,OAAQ,MACRC,QAAS2G,MAkBb,OAfgC,SAAA5E,GAC5B,OAAO5B,MAAM,GAAD,OAEJC,wBAFI,oDAGoC2B,GAC5CjC,GAECrE,KAAKkE,GACLY,OAAM,kBACHlF,EAAgB,uBAAwB,CACpCa,QAAS,cDTKkN,GAC1BC,ECgBD,WAAuC,IAClChO,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IAsBvB,OApBgC,SAAC2G,EAAI9B,GACjC,IAAMH,EAAiB,CACnBC,OAAQ,OACRC,QAAS2G,KACT1G,KAAMtE,KAAKuE,UAAU,CAAE1C,GAAIuE,EAAI9B,KAAMA,KAGzC,OAAOE,MAAM,GAAD,OACLC,wBADK,kBAERN,GAECrE,KAAKkE,GACLY,OAAM,SAAAwI,GACHC,QAAQC,IAAIF,GACZ1N,EAAgB,qBAAsB,CAClCa,QAAS,cDnCKoN,GAE5BC,EAAaC,iBAAO,MAClB/I,EAAU5C,KAEhB6F,qBAAU,WACR+F,IACAC,MACC,CAACjB,EAAanL,EAAMqM,MAAOrM,EAAMsM,iBAEpClG,qBAAU,WACOmG,KAAezJ,yBACvB0J,GAAG,YAAY,SAACpO,GAAD,OAAUgN,EAAehN,QAC9C,IAEH,IAAM+N,EAAiB,WACD,gBAAhBnM,EAAMqM,MACRhB,IAAoBlN,MAAK,SAACsO,GACxBvB,EAAYuB,MAEW,OAAhBzM,EAAMqM,OAA2C,OAAzBrM,EAAMsM,eACvCT,EAAwB7L,EAAM+C,KAAK2J,KAAKvO,MAAK,SAACsO,GAAD,OAASvB,EAAYuB,MAElEvB,EAAY,KAIVkB,EAAiB,WACrBH,EAAWU,QAAQC,eAAe,CAAEC,SAAU,YAGhDzG,oBAAUgG,EAAgB,CAACnB,IAe3B,OACE,kBAAC3E,EAAA,EAAD,CAAMC,WAAS,EAACnD,UAAWD,EAAQzC,MACjC,kBAAC4F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIrD,UAAWD,EAAQqG,WACpC,kBAAC5C,EAAA,EAAD,CAAOxD,UAAWD,EAAQ7B,MAAOwF,QAAM,EAACD,UAAW,GACjD,kBAACvD,EAAA,EAAD,CAAY4B,MAAM,UAAUtG,QAAQ,MACjCoB,EAAMqM,SAIb,kBAAC/F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACnD,UAAWD,EAAQ2G,kBACjC,kBAACxD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIrD,UAAWD,EAAQ6G,aACnCiB,GACC,kBAAC6B,GAAA,EAAD,KACG7B,EAAShC,KAAI,SAAC8D,GAAD,OACZ,kBAACC,GAAA,EAAD,CACEC,IAAKF,EAAEL,IACPtJ,UAAW8J,KAAW/J,EAAQuH,SAAT,yBACfvH,EAAQwH,eACVoC,EAAEI,QAAQ,GAAGT,MAAQ5B,IAEzBnJ,WAAW,cAEX,kBAACyL,GAAA,EAAD,CAAgBhK,UAAWD,EAAQvB,QACjC,kBAACyB,EAAA,EAAD,KACGgK,GAAgCN,EAAEI,QAAQ,GAAG1H,YAGlD,kBAAC6H,GAAA,EAAD,CACEnK,QAAS,CACPzC,KAAMwM,KAAW/J,EAAQgH,cAAT,yBACVhH,EAAQqH,oBACVuC,EAAEI,QAAQ,GAAGT,MAAQ5B,KAG3BlB,QAASmD,EAAEI,QAAQ,IAAMJ,EAAEI,QAAQ,GAAG1H,SACtC5D,UAAW,kBAAC,IAAM0L,SAAP,KAAiBR,EAAEpK,aAMxC,yBAAK6K,IAAKvB,KAEZ,kBAAC3F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIrD,UAAWD,EAAQsH,UACpC,0BAAM1G,SA1DK,SAAC0J,GACpBA,EAAEC,iBACkB,gBAAhB1N,EAAMqM,MACRd,EAAkBR,GAAY5M,MAAK,WACjC6M,EAAc,OAGhBe,EAAwB/L,EAAM+C,KAAK2J,IAAK3B,GAAY5M,MAAK,SAACsO,GACxDzB,EAAc,QAkDoB5H,UAAWD,EAAQpB,MAC/C,kBAACuE,EAAA,EAAD,CACEC,WAAS,EACTnD,UAAWD,EAAQ+G,cACnBvI,WAAW,YAEX,kBAAC2E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACjC,EAAA,EAAD,CACEC,GAAG,UACHG,MAAM,UACNhG,QAAQ,WACR2C,OAAO,QACPsD,WAAS,EACTnF,MAAOqL,EACP/F,SAAU,SAACyI,GAAD,OAAOzC,EAAcyC,EAAEE,OAAOjO,WAG5C,kBAAC4G,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACmH,GAAA,EAAD,CAAY1M,KAAK,UACf,kBAAC,KAAD,e,+BE7LdX,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoN,UAAW,CACTpM,QAAS,OACTE,WAAY,SACZmM,OAAQ,WAEVC,MAAO,CACL/M,gBAAiBP,EAAMQ,QAAQ2I,QAAQC,MAEzCmE,cAAe,CACb9I,MAAOzE,EAAMQ,QAAQ2I,QAAQC,MAE/BoE,KAAM,CACJxE,UAAW,sBACXQ,UAAW,YAqFAiE,GAjFO,SAAClO,GACrB,IAAMmD,EAAU5C,KADe,EAEW0F,mBAAS,IAFpB,mBAExBkI,EAFwB,KAETC,EAFS,OAGenI,mBAAS,MAHxB,mBAGxBoI,EAHwB,KAGPC,EAHO,KAIzBC,EDqBD,WAAgC,IAC3BxQ,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IACjB0E,EAAiB,CACnBC,OAAQ,MACRC,QAAS2G,MAgBb,OAbyB,WACrB,OAAOxG,MAAM,GAAD,OACLC,wBADK,+BAERN,GAECrE,KAAKkE,GACLY,OAAM,kBACHlF,EAAgB,uBAAwB,CACpCa,QAAS,cCrCF4P,GAInBC,EAAkB,SAACC,GACvB,IAAK,IAAIxF,EAAI,EAAGA,EAAIwF,EAAWC,OAAQzF,IACrC,GACEwF,EAAWxF,GAAGzD,WACd/G,EAAsBuB,iBAAiBwF,SAEvC,OAAOiJ,EAAWxF,GAGtB,OAAO,MAgBT,OAbA9C,qBAAU,WACRmI,IAAmBpQ,MAAK,SAACsO,GAAD,OAAS2B,EAAiB3B,QACjD,CAAC4B,IAEJjI,qBAAU,WACR,IAAIwI,EAASrC,KAAezJ,yBAG5B,OAFA8L,EAAOpC,GAAG,YAAY,SAACpO,GAAD,OAAUkQ,EAAmBlQ,MAE5C,WACLwQ,EAAOC,eAAe,eAEvB,IAGD,kBAAC/B,GAAA,EAAD,CAAM1J,UAAWD,EAAQ8K,MACvB,kBAACjB,GAAA,EAAD,CACE7J,QAAS,CAAEzC,KAAMyC,EAAQ0K,WACzBzI,QAAS,WACPpF,EAAM8O,SAAS,iBAGjB,kBAAC1B,GAAA,EAAD,KACE,kBAAC/J,EAAA,EAAD,CAAQD,UAAWD,EAAQ4K,OACzB,kBAAC,KAAD,QAGJ,kBAACT,GAAA,EAAD,CAAclK,UAAWD,EAAQ6K,cAAepE,QAAQ,iBAE1D,kBAACmF,GAAA,EAAD,MAECZ,GACC,kBAAC,IAAMZ,SAAP,KACGY,EAAclF,KAAI,SAAC+F,GAAD,OACjB,kBAAChC,GAAA,EAAD,CACE5J,UAAWD,EAAQuH,SACnBuC,IAAK+B,EAAEtC,IACPuC,QAAM,EACN7J,QAAS,WACPpF,EAAMkP,QAAQT,EAAgBO,EAAEG,eAChCnP,EAAM8O,SAASL,EAAgBO,EAAEG,cAAc1J,YAGjD,kBAAC2H,GAAA,EAAD,KACE,kBAAC/J,EAAA,EAAD,KACGgK,GACCoB,EAAgBO,EAAEG,cAAc1J,YAItC,kBAAC6H,GAAA,EAAD,CACE1D,QAAS6E,EAAgBO,EAAEG,cAAc1J,SACzC5D,UAAW,kBAAC,IAAM0L,SAAP,KAAiByB,EAAE7D,sBC5F9C,IAAM5K,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoN,UAAW,CACTpM,QAAS,OACTE,WAAY,SACZmM,OAAQ,WAEVC,MAAO,CACL/M,gBAAiBP,EAAMQ,QAAQ2I,QAAQC,MAEzCmE,cAAe,CACb9I,MAAOzE,EAAMQ,QAAQ2I,QAAQC,MAE/BoE,KAAM,CACJxE,UAAW,sBACXQ,UAAW,QAEbrI,OAAQ,CACNL,OAAQd,EAAMe,QAAQ,EAAG,EAAG,EAAG,QA+CpB4N,GA3CD,SAACpP,GACb,IAAMmD,EAAU5C,KADO,EAEG0F,mBAAS,IAFZ,mBAEhBoJ,EAFgB,KAETC,EAFS,OAGOrJ,mBAAS,MAHhB,mBAGhBsJ,EAHgB,KAGPC,EAHO,KAIjBC,ECjCD,WAAwB,IACnB1R,EAAoBC,wBAApBD,gBACFsE,EAAiBvE,IACjB0E,EAAiB,CACnBC,OAAQ,MACRC,QAAS2G,MAgBb,OAbiB,WACb,OAAOxG,MAAM,GAAD,OACLC,wBADK,cAERN,GAECrE,KAAKkE,GACLY,OAAM,kBACHlF,EAAgB,uBAAwB,CACpCa,QAAS,cDiBV8Q,GAajB,OAXAtJ,qBAAU,WACRqJ,IAAWtR,MAAK,SAACsO,GAAD,OAAS6C,EAAS7C,QACjC,CAAC8C,IAEJnJ,qBAAU,WACOmG,KAAezJ,yBACvB0J,GAAG,SAAS,SAACpO,GAClBoR,EAAWpR,QAEZ,IAGD,kBAAC0O,GAAA,EAAD,CAAM1J,UAAWD,EAAQ8K,MACtBoB,GACC,kBAAC,IAAM9B,SAAP,KACG8B,EAAMpG,KAAI,SAAC0G,GAAD,OACT,kBAAC3C,GAAA,EAAD,CACE5J,UAAWD,EAAQuH,SACnBuC,IAAK0C,EAAEjD,IACPtH,QAAS,WACPpF,EAAMkP,QAAQS,GACd3P,EAAM8O,SAASa,EAAElK,WAEnBwJ,QAAM,GAEN,kBAAC7B,GAAA,EAAD,CAAgBhK,UAAWD,EAAQvB,QACjC,kBAACyB,EAAA,EAAD,KAASgK,GAAgCsC,EAAElK,YAE7C,kBAAC6H,GAAA,EAAD,CAAc1D,QAAS+F,EAAElK,kBEvDjClF,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCa,MAAO,CACHsO,UAAW,qBACXvF,aAAc,GAElBwF,QAAS,CACLnG,OAAQ,GAEZmE,UAAW,CACPpM,QAAS,OACTE,WAAY,SACZmM,OAAQ,WAEZC,MAAO,CACH/M,gBAAiBP,EAAMQ,QAAQ2I,QAAQC,MAE3CmE,cAAe,CACX9I,MAAOzE,EAAMQ,QAAQ2I,QAAQC,UAmDtBiG,GA/CF,WAAO,IAAD,EACW7J,mBAAS,eADpB,mBACRoG,EADQ,KACDyC,EADC,OAEO7I,mBAAS,GAFhB,mBAER8J,EAFQ,KAEHC,EAFG,OAGS/J,mBAAS,MAHlB,mBAGRlD,EAHQ,KAGFmM,EAHE,KAIT/L,EAAU5C,KAMhB,OACI,kBAAC,IAAMgN,SAAP,KACI,kBAAC,GAAD,MACA,kBAACjH,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACG,GAAI,EAAGvD,UAAWD,EAAQ0M,SACjC,kBAACjJ,EAAA,EAAD,CAAOxD,UAAWD,EAAQ7B,MAAOwF,QAAM,EAACD,UAAW,GAC/C,kBAACD,EAAA,EAAD,CAAOE,QAAM,GACT,kBAACmJ,EAAA,EAAD,CACIjL,SAZP,SAACyI,EAAGyC,GACrBF,EAAOE,IAYiBtR,QAAQ,YACRc,MAAOqQ,EACPI,eAAe,UACfC,UAAU,WAEV,kBAACC,EAAA,EAAD,CAAKzL,MAAM,UACX,kBAACyL,EAAA,EAAD,CAAKzL,MAAM,YAGV,IAARmL,GACG,kBAAC,GAAD,CACIb,QAASA,EACTJ,SAAUA,IAGT,IAARiB,GACG,kBAAC,GAAD,CAAOb,QAASA,EAASJ,SAAUA,MAI/C,kBAACxI,EAAA,EAAD,CAAME,MAAI,EAACG,GAAI,GACX,kBAAC,GAAD,CAAS0F,MAAOA,EAAOtJ,KAAMA,QC7D3CtC,GAAQ6P,YAAe,CACzBrP,QAAS,CACL2I,QAAS,CACL2G,MAAO,UACPzO,KAAM,UACN+H,KAAM,WAEVhI,UAAW,CACP0O,MAAO,UACPzO,KAAM,UACN+H,KAAM,UACN2G,aAAc,WAElB1P,WAAY,CACR2P,QAAS,YAGjBC,WAAY,CACRC,iBAAiB,EACjBC,WAAY,CACR,cACA,WACFxH,KAAK,QAkBAyH,OAdf,WACI,OACI,kBAACC,EAAA,EAAD,CAAerQ,MAAOA,IAClB,kBAACsQ,EAAA,EAAD,MACA,kBAAC,mBAAD,CAAkBC,SAAU,EAAGC,iBAAkB,KAC7C,kBAAC,IAAD,CAAQrT,QAASA,GACb,kBAAC,IAAD,CAAOsT,KAAK,IAAIC,OAAK,EAACtR,UAAWmG,IACjC,kBAAC,EAAD,CAAckL,KAAK,QAAQrR,UAAWiQ,SCjCtC/K,QACW,cAA7BqM,OAAO9Q,SAAS+Q,UAEe,UAA7BD,OAAO9Q,SAAS+Q,UAEhBD,OAAO9Q,SAAS+Q,SAASC,MACvB,2DCZNC,IAASxR,OAAO,kBAAC,GAAD,MAASyR,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzT,MAAK,SAAA0T,GACjCA,EAAaC,iB,mBEnInBpU,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.3a3d63ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3db3c19b.png\";","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import { authenticationService } from '../services/authenticationService';\nimport { useSnackbar } from 'notistack';\n\nconst useHandleResponse = () => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handleResponse = response => {\n        return response.text().then(text => {\n            const data = text && JSON.parse(text);\n            if (!response.ok) {\n                if ([401, 403].indexOf(response.status) !== -1) {\n                    authenticationService.logout();\n                    enqueueSnackbar('User Unauthorized', {\n                        variant: 'error',\n                    });\n                }\n\n                const error = (data && data.message) || response.statusText;\n                return Promise.reject(error);\n            }\n\n            return data;\n        });\n    };\n\n    return handleResponse;\n};\n\nexport default useHandleResponse;\n","import { BehaviorSubject } from 'rxjs';\nimport { useSnackbar } from 'notistack';\n\nimport useHandleResponse from '../utils/handle-response';\n\nconst currentUserSubject = new BehaviorSubject(\n    JSON.parse(localStorage.getItem('currentUser'))\n);\n\nexport const authenticationService = {\n    logout,\n    currentUser: currentUserSubject.asObservable(),\n    get currentUserValue() {\n        return currentUserSubject.value;\n    },\n};\n\nexport function useLogin() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n\n    const login = (email, password) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email, password }),\n        };\n\n        return fetch(\n            `${process.env.REACT_APP_API_URL}/api/users/login`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .then(user => {\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                currentUserSubject.next(user);\n                return user;\n            })\n            .catch(function() {\n                enqueueSnackbar('Failed to Login', {\n                    variant: 'error',\n                });\n            });\n    };\n\n    return login;\n}\n\nexport function useRegister() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n\n    const register = (email, username, password, confirmPassword) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email, username, password, confirmPassword }),\n        };\n\n        return fetch(\n            `${process.env.REACT_APP_API_URL}/api/users/register`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .then(user => {\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                currentUserSubject.next(user);\n\n                return user;\n            })\n            .catch(function(response) {\n                if (response) {\n                    enqueueSnackbar(response, {\n                        variant: 'error',\n                    });\n                } else {\n                    enqueueSnackbar('Failed to Register', {\n                        variant: 'error',\n                    });\n                }\n            });\n    };\n\n    return register;\n}\n\nfunction logout() {\n    localStorage.removeItem('currentUser');\n    currentUserSubject.next(null);\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { authenticationService } from '../services/authenticationService';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route\n        {...rest}\n        render={props => {\n            const currentUser = authenticationService.currentUserValue;\n            if (!currentUser) {\n                // not logged in so redirect to login page with the return url\n                return (\n                    <Redirect\n                        to={{ pathname: '/', state: { from: props.location } }}\n                    />\n                );\n            }\n\n            // authorised so return component\n            return <Component {...props} />;\n        }}\n    />\n);\n\nexport default PrivateRoute;\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport history from '../../utils/history';\nimport { useLogin } from '../../services/authenticationService';\nimport background from '../../assets/background.jpg'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        backgroundImage: `url(${background})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundColor:\n          theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n    paper: {\n        margin: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst Login = props => {\n    const login = useLogin();\n    const classes = useStyles();\n\n    return (\n        <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\" align=\"center\">\n                Sign in\n            </Typography>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .required('Email is required')\n                        .email('Invalid email'),\n                    password: Yup.string()\n                        .required('Password is required')\n                        .max(100, 'Password is too long')\n                        .min(6, 'Password too short'),\n                })}\n                onSubmit={(\n                    { email, password },\n                    { setStatus, setSubmitting }\n                ) => {\n                    setStatus();\n                    login(email, password).then(\n                        () => {\n                            const { from } = history.location.state || {\n                                from: { pathname: '/chat' },\n                            };\n                            history.push(from);\n                        },\n                        error => {\n                            setSubmitting(false);\n                            setStatus(error);\n                        }\n                    );\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    values,\n                    touched,\n                    errors,\n                }) => (\n                    <form\n                        onSubmit={handleSubmit}\n                        className={classes.form}\n                    >\n                        <TextField\n                            id=\"email\"\n                            className={classes.textField}\n                            name=\"email\"\n                            label=\"Email\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required={true}\n                            helperText={\n                                touched.email ? errors.email : ''\n                            }\n                            error={\n                                touched.email &&\n                                Boolean(errors.email)\n                            }\n                            value={values.email}\n                            onChange={handleChange}\n                            type=\"email\"\n                        />\n                        <TextField\n                            id=\"password\"\n                            className={classes.textField}\n                            name=\"password\"\n                            label=\"Password\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required={true}\n                            helperText={\n                                touched.password ? errors.password : ''\n                            }\n                            error={\n                                touched.password &&\n                                Boolean(errors.password)\n                            }\n                            value={values.password}\n                            onChange={handleChange}\n                            type=\"password\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth={true}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Login\n                        </Button>\n                    </form>\n                )}\n            </Formik>\n            <Typography>\n                <Link\n                    onClick={() => props.handleClick('register')}\n                    href=\"#\"\n                >\n                    Don't have an account?\n                </Link>\n            </Typography>\n        </div>    \n    );\n};\n\nexport default Login;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Avatar from '@material-ui/core/Avatar';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Paper from '@material-ui/core/Paper';\n\nimport history from '../../utils/history';\nimport { useRegister } from '../../services/authenticationService';\nimport background from '../../assets/background.jpg'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        backgroundImage: `url(${background})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundColor:\n          theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n    paper: {\n        margin: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst Register = props => {\n    const register = useRegister();\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\" align=\"center\">\n                Register\n            </Typography>\n            <Formik\n                initialValues={{\n                    name: '',\n                    username: '',\n                    password: '',\n                    confirmPassword: '',\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .required('Email is required')\n                        .email('Invalid email'),\n                    username: Yup.string()\n                        .required('Username is required')\n                        .max(40, 'Username address too long'),\n                    password: Yup.string()\n                        .required('Password is Required')\n                        .max(100, 'Password too long')\n                        .min(\n                            6,\n                            'Password should be at least 6 characters long'\n                        ),\n                    confirmPassword: Yup.string().oneOf(\n                        [Yup.ref('password'), null],\n                        'Passwords do not match'\n                    ),\n                })}\n                onSubmit={(\n                    { email, username, password, confirmPassword },\n                    { setStatus, setSubmitting }\n                ) => {\n                    setStatus();\n                    register(email, username, password, confirmPassword).then(\n                        user => {\n                            const { from } = history.location.state || {\n                                from: { pathname: '/chat' },\n                            };\n                            history.push(from);\n                        },\n                        error => {\n                            setSubmitting(false);\n                            setStatus(error);\n                        }\n                    );\n                }}\n                validateOnChange={false}\n                validateOnBlur={false}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    values,\n                    touched,\n                    isValid,\n                    errors,\n                }) => (\n                    <form\n                        onSubmit={handleSubmit}\n                        className={classes.form}\n                    >\n                        <TextField\n                            id=\"email\"\n                            className={classes.textField}\n                            name=\"email\"\n                            label=\"Email\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required={true}\n                            helperText={\n                                touched.email ? errors.email : ''\n                            }\n                            error={\n                                touched.email &&\n                                Boolean(errors.email)\n                            }\n                            value={values.email}\n                            onChange={handleChange}\n                            type=\"email\"\n                        />\n\n                        <TextField\n                            id=\"username\"\n                            className={classes.textField}\n                            name=\"username\"\n                            label=\"Username\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required={true}\n                            helperText={\n                                touched.username ? errors.username : ''\n                            }\n                            error={\n                                touched.username &&\n                                Boolean(errors.username)\n                            }\n                            value={values.username}\n                            onChange={handleChange}\n                        />\n\n                        <TextField\n                            id=\"password\"\n                            className={classes.textField}\n                            name=\"password\"\n                            label=\"Password\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required={true}\n                            helperText={\n                                touched.password ? errors.password : ''\n                            }\n                            error={\n                                touched.password &&\n                                Boolean(errors.password)\n                            }\n                            value={values.password}\n                            onChange={handleChange}\n                            type=\"password\"\n                        />\n\n                        <TextField\n                            id=\"confirmPassword\"\n                            className={classes.textField}\n                            name=\"confirmPassword\"\n                            label=\"Confirm Password\"\n                            fullWidth={true}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required={true}\n                            helperText={\n                                touched.confirmPassword\n                                    ? errors.confirmPassword\n                                    : ''\n                            }\n                            error={\n                                touched.confirmPassword &&\n                                Boolean(errors.confirmPassword)\n                            }\n                            value={values.confirmPassword}\n                            onChange={handleChange}\n                            type=\"password\"\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth={true}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Register\n                        </Button>\n                    </form>\n                )}\n            </Formik>\n            <Typography>\n                <Link\n                    onClick={() => props.handleClick('login')}\n                    href=\"#\"\n                >\n                    Already have an account?\n                </Link>\n            </Typography>\n        </div>\n    );\n};\n\nexport default Register;\n","import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport history from '../utils/history';\nimport Login from '../components/auth/Login';\nimport Register from '../components/auth/Register';\nimport { authenticationService } from '../services/authenticationService';\nimport background from '../assets/background.jpg'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        backgroundImage: `url(${background})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundColor:\n          theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n}))\n\nconst Home = () => {\n    const classes = useStyles();\n    const [page, setPage] = useState('login');\n\n    useEffect(() => {\n        if (authenticationService.currentUserValue) {\n            history.push('/chat');\n        }\n    }, []);\n\n    const handleClick = location => {\n        setPage(location);\n    };\n\n    let Content;\n\n    if (page === 'login') {\n        Content = <Login handleClick={handleClick} />;\n    } else {\n        Content = <Register handleClick={handleClick} />;\n    }\n\n    return (\n        <Grid container component=\"main\" className={classes.root}>\n            <Grid item xs={false} sm={4} md={7} className={classes.image} />\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                {Content}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Link from '@material-ui/core/Link';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\n\nimport { authenticationService } from '../../services/authenticationService';\nimport history from '../../utils/history';\nimport logo from '../../assets/logo.png';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n        display: 'flex',\n    },\n    userDropdown: {\n        marginLeft: theme.spacing(2),\n        padding: theme.spacing(1),\n        [theme.breakpoints.down('xs')]: {\n            marginLeft: 'auto',\n        },\n    },\n}));\n\nconst Header = () => {\n    const [currentUser] = useState(authenticationService.currentUserValue);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    const handleDropClose = () => {\n        setDropdownOpen(false);\n        setAnchorEl(null);\n    };\n\n    const handleDropOpen = event => {\n        setDropdownOpen(true);\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleLogout = () => {\n        authenticationService.logout();\n        history.push('/');\n    };\n\n    const arrowIcon = () => {\n        if (dropdownOpen) {\n            return <ArrowDropUpIcon />;\n        }\n        return <ArrowDropDownIcon />;\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Link href=\"/\" className={classes.title}>\n                        <img src={logo} alt=\"Logo\" height=\"50\"/>\n                    </Link>\n                    <Button\n                        aria-owns={anchorEl ? 'simple-menu' : undefined}\n                        aria-haspopup=\"true\"\n                        onClick={handleDropOpen}\n                        className={classes.userDropdown}\n                        color=\"inherit\"\n                    >\n                        {currentUser.username}\n                        {arrowIcon()}\n                    </Button>\n                    <Menu\n                        id=\"simple-menu\"\n                        anchorEl={anchorEl}\n                        open={Boolean(anchorEl)}\n                        onClose={handleDropClose}\n                        getContentAnchorEl={null}\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'right',\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                    >\n                        <MenuItem onClick={handleLogout}>Logout</MenuItem>\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Header;\n","export default {\n  getInitialsFromName: (username) => {\n    const letters = String(username)\n      .split(\" \")\n      .map((i) => i.charAt(0));\n    return letters.join(\"\");\n  },\n};\n","import { authenticationService } from '../services/authenticationService';\n\nfunction authHeader() {\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.token) {\n        return {\n            Authorization: `${currentUser.token}`,\n            'Content-Type': 'application/json',\n        };\n    } else {\n        return {};\n    }\n}\n\nexport default authHeader;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport socketIOClient from \"socket.io-client\";\nimport classnames from \"classnames\";\nimport commonUtils from \"../../utils/common\";\nimport {\n  useGetGlobalMessages,\n  useSendGlobalMessage,\n  useGetConversationMessages,\n  useSendConversationMessage,\n} from \"../../services/chatService\";\nimport { authenticationService } from \"../../services/authenticationService\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n  },\n  headerRow: {\n    maxHeight: 60,\n    zIndex: 5,\n  },\n  paper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100%\",\n    color: theme.palette.primary.dark,\n  },\n  messageContainer: {\n    height: \"100%\",\n    display: \"flex\",\n    alignContent: \"flex-end\",\n  },\n  messagesRow: {\n    maxHeight: \"calc(100vh - 184px)\",\n    overflowY: \"auto\",\n  },\n  newMessageRow: {\n    width: \"100%\",\n    padding: theme.spacing(0, 2, 1),\n  },\n  messageBubble: {\n    padding: 10,\n    border: \"1px solid white\",\n    backgroundColor: \"white\",\n    borderRadius: \"0 10px 10px 10px\",\n    boxShadow: \"-3px 4px 4px 0px rgba(0,0,0,0.08)\",\n    marginTop: 8,\n    maxWidth: \"40em\",\n  },\n  messageBubbleRight: {\n    borderRadius: \"10px 0 10px 10px\",\n  },\n  inputRow: {\n    display: \"flex\",\n    alignItems: \"flex-end\",\n  },\n  form: {\n    width: \"100%\",\n  },\n  avatar: {\n    margin: theme.spacing(1, 1.5),\n  },\n  listItem: {\n    display: \"flex\",\n    width: \"100%\",\n  },\n  listItemRight: {\n    flexDirection: \"row-reverse\",\n  },\n}));\n\nconst ChatBox = (props) => {\n  const [currentUserId] = useState(\n    authenticationService.currentUserValue.userId\n  );\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [lastMessage, setLastMessage] = useState(null);\n\n  const getGlobalMessages = useGetGlobalMessages();\n  const sendGlobalMessage = useSendGlobalMessage();\n  const getConversationMessages = useGetConversationMessages();\n  const sendConversationMessage = useSendConversationMessage();\n\n  let chatBottom = useRef(null);\n  const classes = useStyles();\n\n  useEffect(() => {\n    reloadMessages();\n    scrollToBottom();\n  }, [lastMessage, props.scope, props.conversationId]);\n\n  useEffect(() => {\n    const socket = socketIOClient(process.env.REACT_APP_API_URL);\n    socket.on(\"messages\", (data) => setLastMessage(data));\n  }, []);\n\n  const reloadMessages = () => {\n    if (props.scope === \"Global Chat\") {\n      getGlobalMessages().then((res) => {\n        setMessages(res);\n      });\n    } else if (props.scope !== null && props.conversationId !== null) {\n      getConversationMessages(props.user._id).then((res) => setMessages(res));\n    } else {\n      setMessages([]);\n    }\n  };\n\n  const scrollToBottom = () => {\n    chatBottom.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (props.scope === \"Global Chat\") {\n      sendGlobalMessage(newMessage).then(() => {\n        setNewMessage(\"\");\n      });\n    } else {\n      sendConversationMessage(props.user._id, newMessage).then((res) => {\n        setNewMessage(\"\");\n      });\n    }\n  };\n\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={12} className={classes.headerRow}>\n        <Paper className={classes.paper} square elevation={2}>\n          <Typography color=\"inherit\" variant=\"h6\">\n            {props.scope}\n          </Typography>\n        </Paper>\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container className={classes.messageContainer}>\n          <Grid item xs={12} className={classes.messagesRow}>\n            {messages && (\n              <List>\n                {messages.map((m) => (\n                  <ListItem\n                    key={m._id}\n                    className={classnames(classes.listItem, {\n                      [`${classes.listItemRight}`]:\n                        m.fromObj[0]._id === currentUserId,\n                    })}\n                    alignItems=\"flex-start\"\n                  >\n                    <ListItemAvatar className={classes.avatar}>\n                      <Avatar>\n                        {commonUtils.getInitialsFromName(m.fromObj[0].username)}\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      classes={{\n                        root: classnames(classes.messageBubble, {\n                          [`${classes.messageBubbleRight}`]:\n                            m.fromObj[0]._id === currentUserId,\n                        }),\n                      }}\n                      primary={m.fromObj[0] && m.fromObj[0].username}\n                      secondary={<React.Fragment>{m.body}</React.Fragment>}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            )}\n            <div ref={chatBottom} />\n          </Grid>\n          <Grid item xs={12} className={classes.inputRow}>\n            <form onSubmit={handleSubmit} className={classes.form}>\n              <Grid\n                container\n                className={classes.newMessageRow}\n                alignItems=\"flex-end\"\n              >\n                <Grid item xs={11}>\n                  <TextField\n                    id=\"message\"\n                    label=\"Message\"\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={1}>\n                  <IconButton type=\"submit\">\n                    <SendIcon />\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </form>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ChatBox;\n","import useHandleResponse from '../utils/handle-response';\nimport authHeader from '../utils/auth-header';\nimport { useSnackbar } from 'notistack';\n\n// Receive global messages\nexport function useGetGlobalMessages() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n\n    const getGlobalMessages = () => {\n        return fetch(\n            `${process.env.REACT_APP_API_URL}/api/messages/global`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .catch(() =>\n                enqueueSnackbar('Could not load Global Chat', {\n                    variant: 'error',\n                })\n            );\n    };\n\n    return getGlobalMessages;\n}\n\n// Send a global message\nexport function useSendGlobalMessage() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n\n    const sendGlobalMessage = body => {\n        const requestOptions = {\n            method: 'POST',\n            headers: authHeader(),\n            body: JSON.stringify({ body: body, global: true }),\n        };\n\n        return fetch(\n            `${process.env.REACT_APP_API_URL}/api/messages/global`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .catch(err => {\n                console.log(err);\n                enqueueSnackbar('Could send message', {\n                    variant: 'error',\n                });\n            });\n    };\n\n    return sendGlobalMessage;\n}\n\n// Get list of users conversations\nexport function useGetConversations() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n\n    const getConversations = () => {\n        return fetch(\n            `${process.env.REACT_APP_API_URL}/api/messages/conversations`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .catch(() =>\n                enqueueSnackbar('Could not load chats', {\n                    variant: 'error',\n                })\n            );\n    };\n\n    return getConversations;\n}\n\n// get conversation messages based on\n// to and from id's\nexport function useGetConversationMessages() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n\n    const getConversationMessages = id => {\n        return fetch(\n            `${\n                process.env.REACT_APP_API_URL\n            }/api/messages/conversations/query?userId=${id}`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .catch(() =>\n                enqueueSnackbar('Could not load chats', {\n                    variant: 'error',\n                })\n            );\n    };\n\n    return getConversationMessages;\n}\n\nexport function useSendConversationMessage() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n\n    const sendConversationMessage = (id, body) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: authHeader(),\n            body: JSON.stringify({ to: id, body: body }),\n        };\n\n        return fetch(\n            `${process.env.REACT_APP_API_URL}/api/messages/`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .catch(err => {\n                console.log(err);\n                enqueueSnackbar('Could send message', {\n                    variant: 'error',\n                });\n            });\n    };\n\n    return sendConversationMessage;\n}\n","import React, { useState, useEffect } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport socketIOClient from \"socket.io-client\";\n\nimport { useGetConversations } from \"../../services/chatService\";\nimport { authenticationService } from \"../../services/authenticationService\";\nimport commonUtils from \"../../utils/common\";\n\nconst useStyles = makeStyles((theme) => ({\n  subheader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n  },\n  globe: {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  subheaderText: {\n    color: theme.palette.primary.dark,\n  },\n  list: {\n    maxHeight: \"calc(100vh - 112px)\",\n    overflowY: \"auto\",\n  },\n}));\n\nconst Conversations = (props) => {\n  const classes = useStyles();\n  const [conversations, setConversations] = useState([]);\n  const [newConversation, setNewConversation] = useState(null);\n  const getConversations = useGetConversations();\n\n  // Returns the recipient name that does not\n  // belong to the current user.\n  const handleRecipient = (recipients) => {\n    for (let i = 0; i < recipients.length; i++) {\n      if (\n        recipients[i].username !==\n        authenticationService.currentUserValue.username\n      ) {\n        return recipients[i];\n      }\n    }\n    return null;\n  };\n\n  useEffect(() => {\n    getConversations().then((res) => setConversations(res));\n  }, [newConversation]);\n\n  useEffect(() => {\n    let socket = socketIOClient(process.env.REACT_APP_API_URL);\n    socket.on(\"messages\", (data) => setNewConversation(data));\n\n    return () => {\n      socket.removeListener(\"messages\");\n    };\n  }, []);\n\n  return (\n    <List className={classes.list}>\n      <ListItem\n        classes={{ root: classes.subheader }}\n        onClick={() => {\n          props.setScope(\"Global Chat\");\n        }}\n      >\n        <ListItemAvatar>\n          <Avatar className={classes.globe}>\n            <LanguageIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText className={classes.subheaderText} primary=\"Global Chat\" />\n      </ListItem>\n      <Divider />\n\n      {conversations && (\n        <React.Fragment>\n          {conversations.map((c) => (\n            <ListItem\n              className={classes.listItem}\n              key={c._id}\n              button\n              onClick={() => {\n                props.setUser(handleRecipient(c.recipientObj));\n                props.setScope(handleRecipient(c.recipientObj).username);\n              }}\n            >\n              <ListItemAvatar>\n                <Avatar>\n                  {commonUtils.getInitialsFromName(\n                    handleRecipient(c.recipientObj).username\n                  )}\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={handleRecipient(c.recipientObj).username}\n                secondary={<React.Fragment>{c.lastMessage}</React.Fragment>}\n              />\n            </ListItem>\n          ))}\n        </React.Fragment>\n      )}\n    </List>\n  );\n};\n\nexport default Conversations;\n","import React, { useState, useEffect } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport socketIOClient from \"socket.io-client\";\n\nimport { useGetUsers } from \"../../services/userService\";\nimport commonUtils from \"../../utils/common\";\n\nconst useStyles = makeStyles((theme) => ({\n  subheader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n  },\n  globe: {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  subheaderText: {\n    color: theme.palette.primary.dark,\n  },\n  list: {\n    maxHeight: \"calc(100vh - 112px)\",\n    overflowY: \"auto\",\n  },\n  avatar: {\n    margin: theme.spacing(0, 3, 0, 1),\n  },\n}));\n\nconst Users = (props) => {\n  const classes = useStyles();\n  const [users, setUsers] = useState([]);\n  const [newUser, setNewUser] = useState(null);\n  const getUsers = useGetUsers();\n\n  useEffect(() => {\n    getUsers().then((res) => setUsers(res));\n  }, [newUser]);\n\n  useEffect(() => {\n    const socket = socketIOClient(process.env.REACT_APP_API_URL);\n    socket.on(\"users\", (data) => {\n      setNewUser(data);\n    });\n  }, []);\n\n  return (\n    <List className={classes.list}>\n      {users && (\n        <React.Fragment>\n          {users.map((u) => (\n            <ListItem\n              className={classes.listItem}\n              key={u._id}\n              onClick={() => {\n                props.setUser(u);\n                props.setScope(u.username);\n              }}\n              button\n            >\n              <ListItemAvatar className={classes.avatar}>\n                <Avatar>{commonUtils.getInitialsFromName(u.username)}</Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={u.username} />\n            </ListItem>\n          ))}\n        </React.Fragment>\n      )}\n    </List>\n  );\n};\n\nexport default Users;\n","import useHandleResponse from '../utils/handle-response';\nimport authHeader from '../utils/auth-header';\nimport { useSnackbar } from 'notistack';\n\nexport function useGetUsers() {\n    const { enqueueSnackbar } = useSnackbar();\n    const handleResponse = useHandleResponse();\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader(),\n    };\n\n    const getUsers = () => {\n        return fetch(\n            `${process.env.REACT_APP_API_URL}/api/users`,\n            requestOptions\n        )\n            .then(handleResponse)\n            .catch(() =>\n                enqueueSnackbar('Could not load Users', {\n                    variant: 'error',\n                })\n            );\n    };\n\n    return getUsers;\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport Header from '../components/core/Header';\nimport ChatBox from '../components/chat/ChatBox';\nimport Conversations from '../components/chat/Conversations';\nimport Users from '../components/chat/Users';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        minHeight: 'calc(100vh - 64px)',\n        borderRadius: 0,\n    },\n    sidebar: {\n        zIndex: 8,\n    },\n    subheader: {\n        display: 'flex',\n        alignItems: 'center',\n        cursor: 'pointer',\n    },\n    globe: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    subheaderText: {\n        color: theme.palette.primary.dark,\n    },\n}));\n\nconst Chat = () => {\n    const [scope, setScope] = useState('Global Chat');\n    const [tab, setTab] = useState(0);\n    const [user, setUser] = useState(null);\n    const classes = useStyles();\n\n    const handleChange = (e, newVal) => {\n        setTab(newVal);\n    };\n\n    return (\n        <React.Fragment>\n            <Header />\n            <Grid container>\n                <Grid item md={4} className={classes.sidebar}>\n                    <Paper className={classes.paper} square elevation={5}>\n                        <Paper square>\n                            <Tabs\n                                onChange={handleChange}\n                                variant=\"fullWidth\"\n                                value={tab}\n                                indicatorColor=\"primary\"\n                                textColor=\"primary\"\n                            >\n                                <Tab label=\"Chats\" />\n                                <Tab label=\"Users\" />\n                            </Tabs>\n                        </Paper>\n                        {tab === 0 && (\n                            <Conversations\n                                setUser={setUser}\n                                setScope={setScope}\n                            />\n                        )}\n                        {tab === 1 && (\n                            <Users setUser={setUser} setScope={setScope} />\n                        )}\n                    </Paper>\n                </Grid>\n                <Grid item md={8}>\n                    <ChatBox scope={scope} user={user} />\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n};\n\nexport default Chat;\n","import React from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { SnackbarProvider } from 'notistack';\n\nimport history from './utils/history';\nimport PrivateRoute from './guards/private-route';\nimport Home from './screens/Home';\nimport Chat from './screens/Chat';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#58a5f0',\n            main: '#ec0000',\n            dark: '#8c0000',\n        },\n        secondary: {\n            light: '#ffd95a',\n            main: '#f9a825',\n            dark: '#c17900',\n            contrastText: '#212121',\n        },\n        background: {\n            default: '#f0f0f0',\n        },\n    },\n    typography: {\n        useNextVariants: true,\n        fontFamily: [\n            'Lobster Two',\n            'cursive',\n        ].join(','),\n    },\n});\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <SnackbarProvider maxSnack={3} autoHideDuration={3000}>\n                <Router history={history}>\n                    <Route path=\"/\" exact component={Home} />\n                    <PrivateRoute path=\"/chat\" component={Chat} />\n                </Router>\n            </SnackbarProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.0a8361cc.jpg\";"],"sourceRoot":""}